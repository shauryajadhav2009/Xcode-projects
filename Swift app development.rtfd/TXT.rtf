{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 ArialMT;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 Menlo-Bold;\f4\fmodern\fcharset0 Courier;\f5\fnil\fcharset0 HelveticaNeue;
}
{\colortbl;\red255\green255\blue255;\red26\green26\blue26;\red255\green255\blue255;\red201\green196\blue189;
\red19\green20\blue21;\red0\green0\blue0;\red255\green255\blue255;\red201\green197\blue189;\red0\green0\blue0;
\red255\green255\blue255;\red155\green35\blue147;\red255\green255\blue255;\red255\green255\blue255;\red252\green90\blue64;
\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c13333\c13333\c13333;\cssrgb\c100000\c100000\c100000;\cssrgb\c82745\c81176\c78824;
\cssrgb\c9412\c10196\c10588;\cssrgb\c0\c1\c1;\cssrgb\c100000\c100000\c99985;\cssrgb\c82896\c81321\c78761;\cssrgb\c0\c1\c1;
\cssrgb\c100000\c100000\c99985;\csgenericrgb\c60759\c13753\c57628;\csgenericrgb\c100000\c100000\c100000;\cssrgb\c100000\c100000\c99955;\cssrgb\c100000\c44604\c31621;
\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww25400\viewh12920\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0

\f0\fs24 \cf0  
\f1\fs48 \cf2 \cb3 \expnd0\expndtw0\kerning0
Swift
\fs28 \
\pard\pardeftab720\partightenfactor0
\cf2 \
1pg dicee project(print,var,array,iboutlets,comments,change image properties,)\
\
\'a0main. Storyboarding helps you design your app. it contains elements like alpa, background, tint, image and much more. \'a0the cross allows you to add more elements like label,buttons by clicking on it. view controller: UI \'a0image view @ iBoutlet weak var (sprite name)(name-iboutlet) acts as a variable, for a specific sprite only. The sprite names are camel cased.\'a0 Arrays - arrays is so collection of images, numbers, na
\fs36 mes and almost anything.\'a0 The elements in an array are written between [ ] and separated by, . An array starts counting from 0. retrieve element in array-my array[element number] variables store some details which keeps changing. \'a0you cannot use it unless it changes. instead use let. to make a an action happen after button is clicked. link it to ib action and write the code between \{\}.\
\
2nd pg\
values can used anywhere even a var(the var should be assigned to a value ) in an[] after the array. to changes images - dice.image = image literal. after the . you can \'a0add elements like text, alpha etc. \'a0dice images are randomised like- dice.image = [array of images ].randomelement(). random element is used to randomise anything images,words,vars etc. Print statement - if i \'a0want to print anything in the \'a0console then the print statement is used. exs- print ("swift"),print ("Hello \\ (2+5)")-this line is used for operations in swift print statement .comments are lines of code lines which are not interpreted in code. They help a lot in making big projects. normal comment-// \'a0multiple \'a0line comment- /*comment*\\.\
\
Xylophone project(func and func with input as well ,solve coding problems,)\
\
How to solve a coding problem. 1. google 2. stack overflow 3. implement 4. docs (when yow.implement the stackoverflow code a understand it by searching on apple developer website) 5. edit it. the stackoverflow code has more than what you need so edit to your needs and make it smaller). function if you want to run the same code multiple times in a project \'a0either than typing it many times , if a var, array or anything is made in 1 func it cant be used it anothe func. to link a ibaction to all buttons, drag the cross beside the ibaction to all buttons in the main.storyboard. functions are also made with inputs ex- func greeting ( parametre : datatype) \{\}. print (sender.currentitle) displays the name of the button if put in a ibaction. \
\
Egg timer project.(if and else, switch , dictionaries ,progress bar, optionals, debugging our app, decimal values)\
\
if and else statements - They are used when an action is done under a condition ex- if trafficlight == green " \{ go()\} \{else stop\} The first value being compared need to be a \'a0var, Let or any \'a0other element . The 2nd value being compared \'a0also needs to be \'a0an element, else its written ""(the same is applied in switch, dictionaries, arrays ).if more statements are being compared \'a0compared, it starts with if\{\} then else if\{\} till the end and the last should be else.the comparing signs in swift- ( == equal to; < greater than; > lesser than; >= is greater or equal to; <= is less \'a0than or equal to;! not equal to) signs used to combine statements - (&& and, || or,! Not) ex- if lovescore \'a0> 80 && \'a0lovescore <= 60 do \{ B() \}. Switch statements \'a0are just like if statements but its easier and faster ex- switch hardness case: "soft" print (15) deftault print (17). signs are present in if statements. we use range for a switch for example a...b - from a to be, \'a0b... \'a0- greater that to smaller than be,\
\
2nd page\
Dictionary - its a collection of values which store another value the like a var let etc. ex-var dict = [ brewery: a place where beer is is made, bakery:A place where bread \'a0is made] \'a0here brewery is the key and its definition is its value. A Int dict -- let dict: (stringn:Int) = [ " Angela:7712345678"] retreive it dict [Angela] Optionals - An optional value allows us to write clean code and \'a0at the same time take care of possible nil values.In optionals ?,!,nil are used. if i write var p1username:string = nil.we will get an error because the p1username can only hold a string value and not a nil(nil means nothing )var player1userame: string? = "jack" print(player1username!) . the ? is added to the string so that it can hold a nil and other string values.! means to forceunwrap a value is to know what value it is to do that  print that its a optional or nil. if i \'a0make a dictionary and put names of buttons in it but they are different to their real names. I \'a0set a constant called hardness to sender.currentitle and then force unwrap it \'a0will \'a0show nil and crash because the dictionary name \uc0\u8800  The real name so it finds nothing. To make progress bar add it from the + , add constraints 0 from left \'a0and \'a0right. then make it stand vertically in the container and then add 5 px in height. steps to deug our app 1.what do you expect your rode to do? 2.What happened instead 3. What do our expections \'a0depend on 4. How can we test the things our expectations depend on? 5. fix our code to make reality match expections. the float is used to convert normal values to decimal. example = proggressBar.proggres = (float(secondsRemaining)/float (totaltime)). the 4th step\
\
\pard\pardeftab720\sl300\partightenfactor0

\fs28 \cf4 \cb5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4   Q
\fs36 \cf6 \cb7 \strokec8 uizzler project The reason why variabls are put into array is because they change, ex- questionlabel.text = Quiz [ question Number ] The value of question Number can be anything and it can also change the text for a question. A 2D array- an array which holds more arrays inside it is called a 2d array. ex- let array = [ [ 1 , 2, 3,],[4, 5, 6],[ 7,8,9] ] to retreive from a 2d array write array [Row number][column number] to check answers we have written. let quiz = [["to 4 + 3 = 10", "False"], [let 8 + 9 is equal to 17,"true"], let 9 - 0 = 9,"True"],. now To retreive the questions, make a new func called updateUI() and in it write questionNumber.text =  [questionNumber][0] .  0 is the location of  The questions in the 2d array question number, 0 is The is 0 column where we have our questions and in the 1st column[1] we have the answer true or false. to check the answers,now in the ibaction for both the buttons write let userAnswer = sender.currentTitle, what this means is that whatever button the user clicks his/her answer be the sender.currentTitle of the button for example if a user clicks \
\
\
on a true button, its sender.currentTitle will be true and false if the false button is clicked. After writing that write let actualAnswer = quiz[QuestionNumber][1] ( the location of the answers in the 2d array.) , to finally check your answers using an if statement write,if userAnswer == ActualAnswer \{ sender.Backgorundgcolor = UIcolor.Green \} else \{ sender.Backgroundcolor = UIcolor.Red\} when When we run our app we see that when we click a button, its color remains red if you give a wrong answer and green if you give a right answer for the rest of the quiz and it dosent go away. To prevent this from happening go to the updateUI function and in that write trueButton.BackGroundColor = clear and falseButton.BackGroundColor = clear. trueButton and falseButton are IBoutlets for both the true and false buttons. but if we run our app agian we notice that nothing happens to the buttons. This is because the buttons turn green and red but for a very short amount of time, because as soon as a button is clicked the updateUI funtion occurs. To fix this issue as well we will use the timer we learnt about in the egg timer project. In the ibaction for the answer pressed button, we have called the upateUi function in the end of the function now we will delete that and write   Timer.scheduledTimer(timeInterval): 0.2,target:self, selector:#selector(UpdateUI) UserInfo:nil, reapeats:false. , but since selectors are \
\
\
used in only objective c, we will have to add an objective c annotataion before the updateUI function. To do that write objc@ before the updateUIFunction.In this way we can have a time interval of 0.2 seconds after the button is pressed and then trigger the updateUI function, so for the o.2 Seconds the buttons can change their colors to red or green depending upon the userAnswer.  to prevent your array from crashing and running out of questions create a new if statement and write in it if questionNumber <= 2 \{question+=1\} else if questionNumber > 3 \{questionNumber = 0\}, you dont need to add an else statement because the computer wont do anything simply and you Get a never ending quiz as well. ( As The logic gets more complicated, its gets relatively harder to
\fs28 \cf4 \cb5 \strokec4  \cf6 \cb7 \strokec8 code more, Structs will help simplify the code vastly.) structs -  T
\fs36 \cf6 \cb7 \strokec8 here are many pre built dataTypes such as Int,String,Double,Float, array ect, but structs are used for building custom datatypes. define struct- struct Mystruct\{\} example - when we Structure a town it will contain properties like people resources,name etc. they will be written as Struct Town \{ let name = "town name ", var citizens = ["c1,c2"] var \
\
resources = ["grain":8,"ore":9 etc] \} when you assign an array or dict to a structs to write them you'll have to write how they are Structured, example - array -let array = ["bye""hello"], notice how they have a [], for a dict write var dict = [Greeting1"hello",Greeting2:"bye"], dicts will be written with a [ and : ,  datatypes here are written with a var or let. to initialise a struct to means to make a real object out of the Struct, to do that write var mytown = town() and then after now to access any properties of the struct write the variable which holds the structs and then use the .notation and then write the property name. if you want to access a content of a property like an object in an array, then struct name>>.dot notation>
\fs28 \cf6 \cb7 \strokec8 >[t
\fs36 \cf6 \cb7 \strokec8 ype in the content in these sqaure brackets]. if you want to count all the contents in an array or dictionary write print(mytown.citizens.count) and to append content into a struct write myTown.citizens.append("new citizen"). and in a struct to make funcs, they are done normally and are called methods but they alaways should be made inside the \{\} of the struct. to acces the method write \
\
\
mytown.funcName . to make more objects out of a struct acts like a blueprint writw you  set var and lets to datatypes like arrays, dictionaries,String and int. example - struct mytown() \{let citizens:[String]    let name:String  var resources:[String:int]\} . you notice that for array var and lets are written with a [], this is becasue array are to be written with [] and to you can also make an array out of ints by writing int in between the [] and in dictionaries, you could change the dataype to be anything. now to intialis
\fs28 \cf6 \cb7 \strokec8 e these type of 
\fs36 \cf6 \cb7 \strokec8 structs you will have to use init, which will  initialise the struct. after the init keyword  write different names for the original properties in the struct your initialising. and give them the same dataype that the original names have in the struct your initialising and then in the \{\} set the duplicte names to the original names for the struct your initialisng.  example- init (People:[String],townName:String,stats:[String:int]) \{ name = townName citizens = People resources = stats \} to use the struct assign the struct to a variable and after writing the variable write the struct name and then add a ( which will give you the pop up snippet for the remaining part of the struct. and then you can use it and access its poperties or example - var anotherTown = \
\
Town( remaining struct snippet  . whenever we make a struct and then initialise it self refers to the new initialised struct, while initialising the struct if you want to give the original and duplicate properties the same name write the duplicate properties after using  self. because the self refers now to duplicate properties of the new intialised struct. when you use a new struct the parameters should be named the duplicate names and not the original names. you can create different objects using this blue print struct and then to acces their properties you will have to use their names.to create a struct in a real life project click on file>>newSwiftFile>>name Your file same to the struct you will create in it>>  and then to use it to group with folders you want.  that file create a new struct called Question and then write let answer:String let question:String . we will initialise this struct in the viewController, in the quiz array write the  question struct \
\
and in that nfill in the parameters by entering answers in the answer parameter and questions in question parameter.  in the IBaction for answerbuttonpressed write let actualAnswer = quiz[questionNumber].answer, instead of quiz[questionNumber]1. in this way the actual answer can pick up the answer by accessing the answers in the quiz array. and then write let UserAnswer =  quiz[questionNumber]. After fixing the error, got to the updateUI() function and then instead of questionLabel.text = quiz[questionNumber][0] write questionLabel.text = quiz[questionNumber].question , we here are accessing the question property of the question struct. to make the code even simpler go to the question swift file and in that make a new initialiser and then in it set the text = q (q is a parametre \
\
which has datatype string), answer = a (a is a parametre which has datatype string). practical - init(q:String,a:String) \{ question = q answer = a\}. And them return back to the view controller and then in the quiz array insted of writing let quiz = Question(question:"The question" , answer:"answer for the question") write let quiz = Question(q:"The question" ,a:"answer for the question") because now question = q and answer = a. So now our code is simpler proggres views - proggres views are like proggres bars.  first write in Progress bar = quiz.count/1 in the starting so we can set the value for the proggressBar for the question in the starting. to now increase the value of the proggress bar write  in the updateUI function  Progress bar = quiz.count/1 * quiz.count - 1  . What this does is that quizCount/1 (9/1 =0.111) * quiz.Count -1 = 8, = 0.111 * 8= 8.888 and this number becomes 1 because in the start the value the ProggressBar is already 0.111.\
\
 so we can show the proggress for the 1st question (0.111 in the start) and then continue till it becomes full. . MVC- The model view controller is a design pattern used by apple.A design pattern is used to structure our apps code and is a proven solution to a common problem. Model is used for data and logic, view is used for its for user interface and the controller which acts as an mediator. how the MVC pattern works - the view send input events to the Controller and the contoller makes a request to the model, the model which processes the data and then again sends the data to the Controller which modifies the data  and then sends it to the view. the controller is the view controller and the storyboard is the view. create a new file called quizBrain, in that create a new struct called quizBrain and then in that enter the quiz array containing all the questions. we dont need to initaialse this because this already has the data and we dont need to enter the questions in it. next move the questionNumber variable to the quizBrain file as well before the quizBrain struct. in the viewController write var quizBrain = QuizBrain(). Over here we are now initialsing the struct made in the quizBrain file. in the  quizBrain create a new func like- func \
\
checkanswer(userAnswer:String) \{\} and then in the viewController write quizBrain.checkAnswer(UserAnswer:Answer) which will help you check your answers as the answer parametre passed in should be a string functions with outputs - func getmilk (money:Int)-> Int \{ let change = money - 2 return change \} the getMilk is the name of the function, in the() money is the input and Int is the datatype then there is a -> which tells us what datatype we want to get when our function is returned, it can be anything . then we have the return keyword, which comes in every function with an output. calling the func - var change = getmilk(4) when I call the func  example - get milk (4) and return money but money will be equal to 2  because we have set the change equal to money - 2 and then returned it. return alaways comes in a func with output. The argument money is equal to the dataType we put in between() after money: and thats how its compared in the func. now we will in the update ui() func write questionLabel.text = QuizBrain.GetQuestion() and proggresBar.proggress = \
\
quizBrain.GetProggres and then in the quizBrain write func GetQuestion() -> String \{return Quiz[questionNumber].text\} and func GetProggres() -> \{let proggres = Float(QuestionNumber) / Float(quiz.count) return proggress\}.in this way we have just put our formulas in the functions with outputs and then returned them. now cut the mechanism which restricts the questionNumber to go higher than quiz.count . then it shows a warning that left side is immutable. if that warning comes up with any function just add mutating before func. now finally to track the score in the updateui function and write scoreLabel.text = "Score:\\(quizBrain.GetProggres())",in the quizBrain go and write the func name, and give it datatype of Int.make a variable called score and set it to 0 as in a Int datatype. and in the answer checking  mechanism write if the user got it right score+=1 and then when we set the questionNum
\fs28 \cf4 \cb5 \strokec4 ber back to 0 after all the questions. and then in our function return score
\fs36 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0
\cf2 BMI calculator\
\
for building multiscreen apps in the main.storyboard you have 2 screens present side to side controlled by different view controllers.In the BMI calculator screen you will see a UIslider which is found in the objects library. we can define the maximum and minimum values for the sliders when they are selected. you set minimum \'a0for height at 0m and weight 0kg and maximum for height at 3m and weight 200kg in the right hand pane.you can also set its starting values in the right hand pane.\
\'a0 we also have the text fields in the stack views which should update to the value of the UI slider. it should update when we slide the ui slider. this trick is used in video time bars. To print the progress of the ui slider under an ibaction you will have to \'a0make an outlet for both sliders and then under the ibactions \'a0write print (outletForHeight.value) or print sender.value,same for height.\
\'a0\
the sender \'a0is the object which is linked with the ibaction or outlet in which we are coding. Then when we want to round them up them ,the code we\'92ll right is - \'a0print( String(format: \'93%.2f\'94, sender.value)) and print this statement. \'a0the thing we\'92ll format is the sender.value which is written after "%2.f". the format it should be formated is \'93%.2f\'94. and for a whole number %2.f which is written at first after format:.we have used \'a0this for weight And height, to make the labels above in the stack view the uisliders show value, we will simply make iboulets for both of them and name them as height label and weight label. \'a0after write the code heightLabel.text = \'a0String(format: \'93%.2f\'94, sender.value) and same for weight.But when we slide them the m and kg disappears\
\
so to fix this problem we will make a constant called height \'a0and set \'a0it = to the iboutlets and then \'a0write HeightLabel.text = \'93\\(height)m\'94 under the formatting statement. this is called the string interpulation where you can join variables,constants and normal texts, the variables or constants are written in () and the normal text after that,so this will be joined. this text is showed as height value when updated. do the same with weight but instead of writing %.2f write %2.f which is used for whole numbers and then use string interpulation under the formatting statement like we did for height. this is the work done for the labels in stack views by formatting and inserting string interpulation under them in their Ibaction\
\
\
\
To calculate the bmi. Now is the work for the sliders. make an ibOutlets for both UIsliders. IBaction for the calculate button and then in the calculate button ibaction set constants height and weight to heighSliders.value \'a0and IBouletForWeight.value,to the value of the sliders.\
\
let height = heightSlider.value and let weight = weightSlider.value. \'a0height and weight are the constants here. they will be displayed properly as they update in the right hand pane. to calculate bmi \'a0the formula is weight/height*height. to print it we\'92ll simply divide our weight constant by height \'a0* height but while doing maths in programming the order swift uses is the bodmas,that is one thing we\'92ll have to care of \'a0so when doing weight/height*height. the weight/height gets executed first. which is a wrong equation so then we will have to put height*height into brackets (). because in bodmas brackets comes first.\
\
classes - classes are way of defining of a blueprint. they help us plan out the objects and methods and initialize it to create the real object. how to write a class. \'a0- class Myclass \{\}. When a Class is made make sure its named \'a0same \'a0to the file. For example if we are making a class for a basic enemy and we enter the constants for \'a0attack, lives etc and funcs like move,attack \'a0they are entered in the \{\} . to call them its pretty similar to structs like ex- skeleton.move, skeleton.attack.\'a0 We create a blueprint for the enemy. to initialize a class all we do write the name and () ex - MyClass(). now we can assign the class to datatype ex \'a0- let skeleton \'a0= enemy() and then we can call the funcs like skeleton.move etc. Another thing about classes is that they can inherit from superclasses. like if i make a new enemy called dragon then to inherit properties\
\
\
\
from the skeleton i\'92ll write the code like this - class dragon : enemy \{var wings span = 5 \}. \'a0in the \{\} we can write additional properties but default we will have the properties of the enemy like move attack etc.verriding a func means means that we take an existing func from the superclass and make it compltely different.important - the override func should be always written in the \'a0\{\} \'a0of the sub class. AND NOT THE SUPER CLASS. and if you want to use func from the superclass and make custom func you will have to use the super keyword add a . and write the func name. ex- super.move and then override it to make a custom func. differences between classes and structs. read about it on apple developer swift programming language guide. struts \'a0 to apple recommends structs but if you need inheritance then use classes. structs are immutable are immutable and passed by value and classes are passed by referece and can inherit.\
\
Segues\
\
to present a new screen \'a0appear on stage when a button or something else is clicked create a new cocoa touch class set its class name to result view controller and make it a subclass of UIviewcontoller,then make sure it gets grouped with \'a0the folder controllers. then we will get a new file with all starting code like ovveride func,main class and super .ViewDidload. then select \'a0to the second screen from \'a0the yellow circle \'a0button at the top of the second screen then pop up the right hand pane and go to the button \'a0that looks like a newsPaper \'a0called the identity inspector \'a0write the class to the resultViewController, in the future when you are linking a new screen to a new a new viewController do the same and set the class to the name of the new viewController which you give while making it.and then select the second screen and go to assistant mode. you will see both view controller and screen side to side, a nice thing is to rename viewContoller based on their screen job . to do it go right click the viewcontoller class name refactor>> rename and then rename it the view controller of the bmi screen to calculateViewController.\
\
\
\'a0to create a segue \'a0right click on \'a0yellow circle of CvC screen \'a0and drag it to the \'a0yellow circle of Rvc screen \'a0and then click present modally. an arrow pops up and separates the cvc screen from the rvc screen,then click the arrow \'a0and set the identifier to gotoresult in the right hand pane and then to present the screen \'a0 go to CalculateViewController and write \'a0 self.performSegue(withIdentifier: "gotoresult", sender: self) in the ibaction of the Calculate button. self here means the current class which is the calculate view controller and the with identifier should as same as the name of identifier, here which is gotoresult, we will right it in this ibaction as when the button is pressed the screen should come up. in the resultViewController create a new variable called BmiValue and set it to an optional string,here we will be passing the bmiValue and we set it to an optional string because we dont what its value is at the start. then write \'a0 override func prepare(for segue:UIStoryboardSegue,sender:Any?)\{if segue.identifier == "goToResult"\{ let destinationVC = segue.destination as! ResultViewController\
\'a0destinationVC.bmiValue = bmiValue \}.( this must be written not in any ibaction and written seperately.)\
\
\'a0 \'a0this ovveride func is used to run code just before we reach the second segue. there we will check that if the segue.identifier == \'93goToResult\'94 so here we \'a0can differentiate between segues upon there identifier. \'a0then we will make a new constant called destinationVC and set it equal to segue.destination which is the resultViewController,this is the segue that will be initialized before reaching the second screen. as! resultViewcontroller will make sure that the next screen is \'a0resultViewContoller.then we make a new constant in the CVC at the top called BmiValue and set it "0.0" temporarily and then in the statment where\
calculate the bmi under it we will format the bmiValue like bmiValue = String(format:"%.1f",bmi),\
\
so here we will \'a0set the bmiValue of the Cvc equal to the bmi in a formatting statement just below where we calculate the bmi. now in the resultView controller you can set the BMIlabel to the bmivalue value passed from the CalcualteViewContoller to the resultView controller like bmiLabel.text = bmiValue . to go back to the previous screen go to the resultView controller and then write self.dismiss(animated:true,Completion:nil) in the recalculate button ibaction.\
\
\
MVC kick in\
lets kick in the mvc.lets create a new calculateBrain swift file in the models folder . write a struct to structure our brain. and in the calculateViewController delete the var bmiValue as well as \'a0the calculation and turning into string part also in the override func in the end write after the destinationVC.bmivalue = calculatorBrain.GetBMI(). then in the calculate button ibaction in the cvc write calculatorBrain.calculateBMI( height : height, weight:weight), after writing that initialize \'a0the calculatorBrain file by writing var calculatorbrain = CalculatorBrain().all these funcs will give us an \'a0error because we have not written in the calculatorBrain file. in the new swift file we created write in the first then make a \'a0struct called Calculator brain and \'a0write in it func calculatorBrain(height:float,weight:float)\{ bmi = weight/ height * height\}.\
\
so the error goes away what this means here is that when we write in the IBaction for the calculate button calculatorBrain.calculateBMI( height : height, weight : weight) it means that the \'a0height value \'a0set to float (which is nil) before in the calculatorBrain swift file,in this func \'a0the same height value is set equal to the other height value equal to height slider.Value in the same ibaction.and same with weight which is equal to weightSlider.value. now we are \'a0getting these values and we have calculated the bmi in the func in the calculatorBrain Swift file. after setting the values they are passed to the next screen through the ovveride func in the CvC.\

\fs28 \
\'a0 now we will write the get getBMIvalue func.instead of setting the BMI as a constant in the calculating BMI function,we will create a new variable called BMI and set it to zero point zero and then in the calculating BMI function we will remove the let keyword so now we will change the value from 0.0 to the calculated, it will look something like bmi = weight/(height*height) . in getBMI func set the \'a0return datatype to string and in func body write \'a0let BMIto1DecimalPlace = \'a0 String(format: "%.1f", bmi )\
return BMIto1DecimalPlace. the bmi we\'92re formatting is the bmi we calculated in the previous\
\
func and returning it by the name of BMIto1DecimalPlace after formatting it . but a more accurate way of starting would be setting \'a0var bmi = nil and not var bmi:Float = 0.0. but this gives an error so we set bmi to an optional float by writing bmi:Float? and then we can unwrap bmi while formatting it in the formatting and returnig statement. but if the formatting func is executed before the calculating func then bmi is still a nil value as its still not calculated.so that\'92s a problem so we need to look more in optionals. \'a0\
\
\
More in optionals\
more in optionals - in optionals there are mainly 5 things 1.Force unwrapping 2.checking for nil value 3.optional binding 4.nil coalescing operator 5.optional chaining. let me make a myoptional constant and give it a \'a0string? datatype. the ? makes it a an optional string, and turns it into an optional. if i \'a0give myoptional \'a0a value \'a0like myOptional = \'93angela\'94 and create another constant give it a string datatype and set it equal to my optional. it will give us an error because \'a0my optional has a different datatype. we can unwrap the optional by adding a ! at the end of my optional. like let text:string = my optional!. but then we will have to make sure that no nil value is found anywhere in the code or the app crashes, as we cant do anything with nil values . instead we will use the checking for nil value with an if.\
\'a0\
\
\'a0example- if Myoptional != nil \{ let text:string = my optional! \}. != means not equal in if statements.(read in egg timer project). this line means that if Myoptional constant is not equal to nil ( or equal to something something), then we can safely forceUnwrap the myoptional value and if anywhere a nil is found the line will simply get skipped.then if i make another text2 optional to set it to the Myoptional i\'92ll have to force unwrap it again. and do the same for new constants. instead i can use optional binding and \'a0write, if let safeoptional = my optional instead of \'a0Myoptional != nil. this is called optional binding where i am binding the value of a constant(safeoptional) to another constant(Myoptional) who\'92s value is not nil. all the other code remains the same but now i dont need to forceunwrap the text and text2 constnats but \'a0will have to set the text and text2 constnats = to safeoptional without unwrapping it in the if let safeoptional = myoptional\{\}\

\fs36 \
\'a0 \'a0we can also use the nil coalescing \'a0operator, where we give the optional a default value.ex- optional ?? \'94default value \'94.the left side contains the optional value \'a0and the the right side contains the default value we provide in . over here it checks that if the value of the optional is equal to something then then the \'a0optional value will be used, but if the optional value is found nil \'a0the default value will be used. if i keep the myOptional = nil \'a0and then write \'a0let text:String \'a0= myoptional ?? " i am the default value ". the optional which is a nil here( as we just set it), wont be used and we will get an error. instead we put ??"default value" beside it then it would work because now it can use the default value which \'a0we gave it instead of using the optional nil value.\
\
when you have an optional struct or optional class. you use the optional chaining . suppose i make a struct called Myoptional. write down its properties and methods in the structs \{\}.After that we set the Constant myOptional to the struct myoptional by writing myOptional:myoptional and make the struct Myoptional an optional struct like let MyOptional:Myoptional?. then initialize it by writing \'a0let MyOptional = Myoptional(). now now I want to access its properties or methods I will use the dot notation and after it write the property or method name.but then if I do that I will get an error because the struct is an optional and its properties and methods are not. i can unwrap the struct but if a nil value is found anywhere in the code the app will crash so i will write Myoptional?.property. what this means is that if the myoptional struct is \'a0not a nil, acces the property or method used after the . notation. if the optional was intialised, the optional chaining still does the job.\
\
bmi end notes\
\'a0in the BMI calculator brain wrap the getBMI function the in an if statement with says if BMI is a not equal to nil and unwrap the BMI \'a0in the formatting statement by writting if bmi != nil \{ let bmiTo1Decimal = String( %1.f,bmi) return bmiTo1Decimal\}. (if bmi != nil also means that bmi is equal to some value) but we will also need to return string as we have set it as the return datatype so after we write the func \'a0we will also add an else statement and write in its \{\} return "0.0" . \'a0we are using the checking for nil values statement. or we could use the nil coalescing operator by writing bmi ?? 0.0. when we are formatting the bmi. ex - \'a0let bmiTo1Decimal = String( %1.f, bmi ?? 0.0) \'a0in the get bmi func.so if the bmi value is = to something then the formatting will run else if its a nil it will return a \'930.0\'94, so we wont need an else statement. else use the nil coalescing operator \'a0and delete the if bmi != nil statement and else statement.\
\
to make the app more in mvc design pattern so make a new swift file in the model folder called BMI. make a struct there write struct BMI\{\}. in it write value:Float \'a0 advice:string \'a0color:UIcolor. and then in Calculator brain set the bmi value to the optional struct BMI by writing var bmi:BMI?.here we are intialising the struct by setting its dataype to an optional and assigning it a var bmi. in the func where we are formating we will write bmi?.value ?? 0.0. which means that that if the BMI struct is an optional but its value is not so we can use the ?. to acces its properties and the ?? says that if bmi.value is a nil then the default value is used which is 0.0. now in the calculating bmi statement we can\'92t set bmi.value = weight*(height * height))\
\
\
\
instead make a constant bmiValue \'a0= weight*(height * height)). below that line we write. if bmiValue < 18.5 \{bmi( value : bmi value , advice \'93eat more pies \'94, color:uicolor.blue\}. if bmiValue < 24.9 \{bmi( value : bmi value , advice \'93fit as a fiddle\'94, color:uicolor.green\}. if bmiValue > 24.9 \{bmi( value : bmi value , advice \'93eat less pies\'94, color:uicolor.red\}. all of this will be written in the calculate bmi func so when we pass the results to the Rvc the colors and advices also get passed.\
\
\
in the Rvc create a new constant for advice and label and set their datatype to an optional string.then in the BMI calculator brain make two new functions called get advice and get colour set the return data type for getAdvice string and colour UIcolour.in the get advice function write return bmi?.advice ?? "no advice". what this means is that it will retrive the advice property and if the bmi is nil the deafault will be used \'a0get colour function write. bmi?.color ?? UIColor white. the meaning of this \'a0this line means that if the colour is of a nil value it will use the default value which we have provided. it picks up the advice and color based on what we wrote in calculating bmi function. depending on the mi what advice and color we gave the advice and color, we set the var bmi = the advice \'a0and color so when we write bmi bmi?.color we are picking from the bmi variable which is already set to something. we have set it in the calculating bmi func and given the advice and color based on the bmi value, so we are retreving from the var bmi which is set something in the calculating bmifunc and there we have the advice and color, based on bmiValue.\
\
to actually use the color and advice we will have to change the advice text and background color in Rvc, we will write in the rvc view.background color = color and adviceLabel.text = advice and \'a0bmi.text = bmi. these are written in the ovveride func viewDidLoad of Rvc. the advice, bmi and color are optionals of string datatype we set in the Rvc they. the advice,colour and BMI first start and are calculated in the calculator brain Swift file and then they are passed through the ovveride func in the CvC by func get bmi, getAdvice and getcolor. and then after they are passed we are setting them now here.\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf2 fin\

\fs28 \
tipsy \
to make the stepper show value make a constant  called and set it to snder.value and then format it to 2 decimal places in the ibaction like let People = String(format:"%1.f",sender.value)  and create another variable called numberOfPeople outside the Ibaction at the start and set the default value to 2 as its the starting number of people and then set it to people so we can use it outside the ibaction like numberOfPeople = People. and then set the SplitNumber.text to people  like SplitNumber.text =  People .  and then to record the tip make a constant called FirstTip and set it to sender.currentTitle in the ibaction of the buttons and write 
\f2\fs24 \cf9 \cb10 \kerning1\expnd0\expndtw0 if Firsttip == "10%" \{ Tip = "0.1" \} else if Firsttip == "20%" \{ Tip = "0.2" \} else if Firsttip == "0%" \{ Tip = "0" \}\cf11 \cb12  \cf9 \cb13 so we can record the tip and to select the button when clicked write if Tip == "0.1" \{ TwentyPctButton.isSelected = false TenPctbutton.isSelected = true ZeroPctButton.isSelected = false \}\
\
\cf14 \cb10  \cf15 \cb3 and then vice a versa continue with an if else for the 20% and 0% and change the the other two buttons false and the 20% true when your writing the selection statement for it and set 0% to true when you\'92re writing for it. here we are using the tip we got before to select stuff. and set all the button.isSelected to false because they all should be not selected when the project starts . In the calculate button ibaction write let bill = bill.textField and then finally calculate the formula using our variable. After making variables to record stuff into specific ibactions write variable = variableinIbaction and to convert specific values datatype write datatypeName(variable or value or constant).\

\f3\b \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f2\b0\fs28 \cf9 \cb10 CLIMA\
\
learnings - (How to create dark mode enabled app and use vector assests, learn to use UITextField to get user input,Learn about swift Protocols and delegate design pattern,Learn to work with API\'92S by making HTTP request with URL Sessions . Parse JOSN and the native JSON Decoder. learn to use computed properties, closures and extensions, learn Core Location to get GPS DATA)\
\
                         dark mode and sf symbols\
the images we use in swift projects are  apple\'92s SF symbols. you can get it on apple developer documentation by searching it. it gets updated and  better when a new iOS comes. to select one you find good in sf symbols library, you can have to select in the SF symbol you already have in the project and on right hand pane  you will see a the image  section  you can scroll down it or search the one you found good in the website. then if you give the symbol a system tint color it will change according to theme but a custom tint color will not change that\'92s why use system colors when using an apple sf symbol. to use a custom color go to assets.xcassets then click on plus button>>add new color set>> then you get a new square there. change appearances to any light,light and dark. select the square and define a custom color by clicking  color panel and to save it select the element you are gonna color then click on custom color in the right and pane property use the dropper and save the color by dragging to the empty box beside. go to the assets folder, click on the color panel and it will pop up and select the any appearance and light appearance square and drag drop the color, keep it white in the dark appearance but you can change it how you want it in the dark appearance . then give it a name. then in storyboard \
\
\
select the uiImage view go to custom color go to top and and select our color. to select background for different modes the user is in. go to assets folder select background.  in the left hand pane and we here are using a png which is not very accurate and can have error while displaying. instead we will use a vector image. select the background image and delete it and drag and drop the light
\fs24 _background.pdf  
\fs28 directly to the 1st box. and then in the right hand pane  and check the resizing preserve vector data by ticking the box and  change the scales property scales from individual scales to single scale in right hand pane and then set appeareances to any, light, dark this will help us to specify images for different modes. for any and light appearance keep the blue backGround copy the first image for the  the first any appereacnce and  to the 2nd box for the light mode.\
\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\fs24 \cf9  (it will given down below) and then red for the dark mode. drag and drop the dark_background.pdf directly to the 3rd box for dark appearance. it will written down below. A UITextField is a search bar you can it in the objects library. the field can adapt to different modes. in the right hand pane. go to text input traits there you can choose what format to type in.  there you can set the keyboard type to numeric or only words. then you can also choose your return key to go or return default. but always choose go as it makes more sense and twitter or google when you have to google or search it on twitter. and there may be also a checkbox called secure text under all other options that means when the user types in the words they are displayed as dots(mainly use this passwords). so other people can\'92t see it\
\
UItextfield fundamentals \
\pard\tx593\tx6478\pardeftab593\pardirnatural\partightenfactor0
\cf9 make an IBaction for the search button beside the Textfield. by making an iboulet for the textField we can access its properties like text. TextField refers to the whole textField and the Iboulet for it  refers to what we typed in the searchField. the placeHolder property of the field means means a light text like search which reminds users what to search.you set it to anything you think is good. to use  keyboard use com + k. When we click go nothing happens to fix this go to the textfil Write ,UITextFielDelegate beside class WeatherViewController: UIViewController, this gives us access to the properties of the UiTextFieldDelegate. and in the override func write searchTextField.delegate  = self. what this does is it allows the SearchTextField to report to the WeatherviewContoller when the user types something in.  what self means is the current view controller here (WeatherViewContoller). to make the viewController know that something has been typed in the search bar and the user has clicked go. write func TextFieldShouldReturn(_textField:UItextfield) -> bool)\
\
\
 and in the \{\} print(searchTextField.text) and then below it return true. this is the code ran when i type someThing in the textField and click go, the text gets printed   if i type Mumbai and click go,then Mumbai should get printed in the console. to make the same happen when you click search write print(SearchTextField.text) in the ibaction of the search button. no need to return as we don\'92t have an func with output here. to get rid of the keyboard when you have searched a city name just write SearchTextField.endEditing(true) in ibaction of the search pressed and textFieldShould return func. mention this just on the last line on both and after the remaining code.\
 
\fs28 \
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0
\cf9 and to clear the city name after typing in name write  textFieldDidEndEditng(_textfield : UItextField) in the \{\} of it you simply write SearchTextField.text = "". this occurs when the city name is typed, so now we get nothing after searching as we have set the value to an empty string. to prevent the user from typing nothing and search use another func called textFieldShouldEndEditing, in its \{\} write if textField.text != ""\{return true\} else\{ textField.placeholder = "typeSomething" return false. what this says here is that if the textField.text = nothing then keep the keypad on by returning true else set the placeholder = "typeSomething" and return false.(remember here textField is the hole bar and search field is what text we type in these funcs are never called by us instead they are ran by the textField. we can also have multiple textFields running the same func.\
\
\
protocols\
they are like certifications which need to meet certain requirements example - protocol myProtocol \{// meet requirments \}. structs and classes can also adopt to these protocols  like, struct myStruct : myPrtocol \{\} same with classes as well. now if i make a class called birds like class Birds \{func fly() \{print(\'94i can fly\'94)\}\}. and then initialize it now i can make the bird print i can fly, by writing bird.fly().\
\
 then make another class called penguin and inherit it from the birdClass like class penguin:bird \{// add addiontional properties\} and then initialize it as well like let myPenguin = penguin(). i can make it make it fly as well but penguins can\'92t fly to fix that we\'92ll make use of protocols (you can override it too but still read you can read about it as well, in this file search override.)\
\
 we make a new struct called Flying museum and in the 
\fs24 \{\} of the struct make a new func and in its  ()  write FlyingObject:Bird. this statement means we are setting a constant flying object equal to anyBird like eagle, penguin and anything we make in the future in the  birdClass,we can get access to the bird properties we type in the bird snipet beside FlyingObject: and in \{\} write bird.fly() we can set the flyingObject to any bird. after that initialize the FlyingMuseum, we can now Write  FlyingObject.penguin so now the penguin can fly, we can even write eagle and have access to and its properties like soar as its a bird.\
\
but if make one more class and call it airplane and inherit from bird like   class airplane:bird \{\}. and then initialize it. then write airplane.fly but it will fly like a bird we can override it but it also lays eggs?!. which is super weird, that\'92s where protocols kick in. make a protocol, protocol canFly \{func fly()\}. again  this is like a certificate to fly, so to fly the requirements  you\'92ll have to meet is a fly method that\'92s why we have written  func fly().  functions in a protocols don\'92t have bodies. We first implement them and specifically and define them different for different classes. first delete the fly func in the bird class. So to give this certificatate to the eagle then  implement and define it ex - class Eagle:Bird,Canfly  \{ func fly() \{print(\'93the eagle flys like a mighty bird\'94)\}\}. here we have implemented it by typing ,canFly beside inheritance statement. and defined it customly by typing the same fly func and giving it a different sentence . you  can do this for other birds as well button  penguin as he can\'92t fly. and to make the plane write class Airplane:CanFly \{\}. as he dosent inherit and to those are already inheriting from a class write class Eagle:Bird,Canfly \{\}. write it beside for those who are inheriting after the inheritance statement and :for not inheriting\
\
and so in the the struct FlyingMuseum  its func flyingDemo we\'92ll use the protocol as a datatype for the flyingObject like func flyingDemo (flyingObjetc:Canfly). in the struct flyingMuseum and func FlyingDemo. so now when we write we can put in the snippet anyBird who adopts the canFly protocol like eagle,plane but not the penguin as he dosent adopt the canFly protocol. you could also have structs and classes adopting multiple protocols  like struct Mystructure:FirstProtocol,AnotherProtocol \{\}. and to use multiple protocols when you inherit write , My class:SuperClass,FirstProtocol,AnotherProtocol. the UITextFieldDelegate in the main class in weatherViewContoller of our app is a  protocol having requirements like shouldEndediting,DidendEditing etc.\
\
The delegate design pattern(Apple\'92s favorite design pattern) \
the delegate design pattern is a proven solution to a common problem \
\

\fs28 delegate contains the protocol  which notifies the TextField when an action is occurred\
the problem: Apple makes a TextField which will be used to by developers to make iOS apps in the future. this will be like a template to start  which has already defined properties and methods. so the developers don\'92t have make to define it from scratch. Now we create a new WeatherViewController, for it to work with the textField it needs to know when it is edited. the technology which makes delegates work are  protocols.  we can make a protocol like CanDealWithUITextFields, we can define methods for the protocol. like func TextFieldDidBeginEditing which we can use to detect when the textField is edited. this in real code for CanDealWitUITextfields is called UItextFieldDelegate the one which we put in the main class of the WeatherViewController. Now the WeatherViewController can adopt this protocol and gain access to its properties. We will put it in the main class like ,UITextFieldDelegate as the start of the line as inheriting is happening. in the textField its set its delegate by writing var delegate:UITextField.in order to use the properties of the delegate of the ui textField you\'92ll need to be of uitextField type \
\
ow it can gain access to properties like delegate.TextFieldDidBeginEditing. i order for the WeatherViewController to be notified by the textField for that we will initialize the textField. we can set its delegate to self, self over here is the current class or WeatherViewController. so now lets see what happens when our app runs first the let TexTField = UITextField we create a reusable text field from the UITextField  then we set the delegate property  to self the var delegate: UITextFieldDelegate. property of the UITextField will be set equal to the weatherVieWcontroller we can do this beacause it adopts the UITextFieldDelegate protocol(we write it beside the main class) and when the  TextField is edited the delegate.TextFieldDidBeginEDiting method in the UITextField will run. this notifies the the WeatherVC that editing has started then the func TextFieldDidBeginEDiting() will run. in the weatherVc because delegate here is set as weatherVC when we call Delegate.TextFieldDidBeginEDiting() \
\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\fs24 \cf9 Getting the weatherData - API - An Application Programing Interface (API) is a set of commands, functions ,protocols and objects that programmers can use to create software or interact with an external system. it provides us with standard commands for performing common operations so they do not have to code from scratch. They are like a contract between the developer and the API provider. when we build our weather app we will use the APIS provided by open weather. when we type in a city name in the search bar, it will be send to open Weather which will send us the weather for city name. o use the APIS  provided by open weather go to https://openweathermap.org/api. then you will need to sign up with them. then click on API key and then you will se it. copy it and go to the current weather data and click on API doc, in the api section of the website. click on current weather data, and click the api link \
\
\pard\pardeftab720\partightenfactor0

\f4\fs30 \cf9 \expnd0\expndtw0\kerning0
https://api.openweathermap.org/ata/2.5/weather?q=\{city name\}, q denotes the query which we give to the openWeather. after we pass the city name we need to have the weather data for. instead of city\{\} write the actual city name and then write appid=(give your appid that you have   saved)
\f2\fs24 \kerning1\expnd0\expndtw0 . and to mention units for temperature  write &units=metric. to make the same api request through the app project make a new a swift file. create it with the models folder. Call it the weather manager. create s struct called struct Weathermanager \{\}. in it make a constant called let weatherURL = (Api link), as a string input. now to fetch the real weather data in the struct make a func called fetch weatherData(cityName:String) \{ let urlString = \'93/(weatherUrl)&q=(cityname)\'94\}\
\
\
\
\
The terminal \
\pard\pardeftab720\partightenfactor0

\f5\fs32 \cf9 \expnd0\expndtw0\kerning0
command line terminal\
The terminal helps you do normal things on the mac but in a faster way, it also gives you supreme control over the computer. to open the command line you will have to open the terminal app.\'a0version control in GitHub helps you save versions of projects.when you\'a0 screw up on one project. you can go back to the previous versions saved in GitHub.  Through the terminal you can gain access to the bash shell. think of mac os as a nut, the main part or kernel is the os and the shell  is the  the ui. It is  used to communicate with the kernel. The shell we will be using is the bash or Bourne Again Shell. so lets start \
\
The ls command is used to list all items like folders ,files  they will be printed in the terminal. to access one of them use the cd command. for example if i want to access documents , after the cd command type in  documents/, you can either type in full or use type in enough letters for the document name and hit tab so the terminal will know what  you are talking about. and then hit enter so you will enter the folder and then to access further stuff into documents, the cd command will only  be used, similarly the ls command will only be used to list anything. to use the cd command continuously instead of typing cd again and again you can simply type cd Documents/Shaurya/IosApps . type the the thing you want to view in documents after  the first / and then follow on . to go back from the folders type in cd ~. it will take you to the start of the finder. to go back levels type in cd .. , it will take you 1 directory back. you cannot type any other file  name when you\'92re navigating through another because the commands are only looking to go forward.\
\
to clear the the screen write the clear command.  see short cuts in the GitHub hosted web page for the terminal ( book marked in the browser ).\
\
manipulating and making directories and secret folders \
 to make a new directory first you will need to go to a folder using the command line and then you  need to enter it .to make a new directory write mkdir (File name). To open applications using the command line like textEdit, first go to the folder where you want to make the file and then enter it, write touch (New file name.(file extension)). like to make a text file write touch Text1.txt.  to open the file write open  write  Text1.txt., to delete the Text1.txt file, first go to the folder where it is and then type rm  Text1.txt.   and then if you want to delete an entire directory, first go to documents   type rmdir\'a0\'a0(directory name )., but first you will have to remove all the content  in it, to do it directly in one command write  rm -r (directory name)  commands are same for all applications. to delete   everything in a single directory  first you will have to navigate through it and then enter it , write rm * and everything in that file will be deleted. But make  sure you\'92re in the correct file or else you will lose everything.\
\
Done!!\
\
git and version control\
create local repositories - local repositories save projects in the computer. first create a new directory called story. in local repositories you have the working directory , the staging area  and then finally then local repository . the working directory is from where you will be adding files. the staging area is a place where you have to add  your files and then decide  whether to commit  them to your local repository.   make a text file called story1 in it through the terminal. write something in story1. this is our working directory       where now we will commit files. in order to create a local repository you will have to initialize git first.  go to the folder where your text file is kept and then after entering data in it write git init. \
\
the git file is hidden. to see it write ls -a. to see what files are in the staging area write git status . here we haven\'92t added any files. to add files to the staging area  write git add (file name). then if you type in git status again. now we will see the chapter1.txt file because  we just added it.  to finally commit the file to your local repository after adding it in the staging area write git  commit  -m \'93type in a commit message\'94. after committing your file to the local repository. to see what files you\'92ve committed write git log and then you can see your committed files. to add all the files in one directory   simply write git add . \
\
after closing your terminal if you want to see your committed files again go to the folder where you have your committed files DONT WRITE GIT INIT!  and write git log and you will see your files. if you mess up one of your chapters , go to the terminal and go to the story folder and write git status, you will see in red text that  the file you made changes in has been modified . to revert it on a new line write git checkout (file name you want to revert) and then the chapter file will be reverted. \
\
how to create remote repositories \
remote repositories are places where you can store your projects on githubs server. to do that first create your repository and then copy the repository link. now open the   terminal and then go to the folder where you have your projects saved  and you want to push them. After that write git remote add origin (paste your repository link that you copied). and after that write git push -u origin master.\
\
branching and merging \
to make a new bench locally write  write git branch (branch name), and to see your branches type in  git branch, it will show you new branches. to switch to the branch write git checkout alien plot. you can make changes in like create new files, etc. and when you switch to the master branch nothing would have changed as it originally was.  to merge the alien and master branch switch to the master branch by checkout command and then to merge write git merge alienPlot and hit enter. this will open vim which is a text editor.      you can add a merge message there. to save and quit it write :q! . to commit it finally write git push -u origin master .\
\
using xcode for source control\
when you make a new project put a tick on the Create git repository on my mac. after you make changes in your project go to the source control navigator to see your commits. To commit changes you have made to your projects go to the source control button on the top and then click commit. You will see the xml code and all the changes in file forms.\
To finally add commit the changes add a commit message in the bottom. And then commit it . then while coding if you mess-up all the code you have written, and mess-up something in the main.StoryBoard. And you want to reverse all your changes simple click on the source control button on the top and then click on discard all changes and then discard all of them. Your messed up file will be restored to your previous commit. To create new branches go to the source control navigator and then from the commit where you want to branch out your branch, right click on it and then click branch from, A window will pop saying to give the branch a name. Then you can name the branch however you want.\
to switch between branches right  click on the branch name in the left hand pane and then click on check out to switch to the branch. \
\
if you want to merge a branch to the master branch, checkout to the branch you want to merge to the master. rightClick on master  you\'92re in and then click merge to master. a window will pop up, give it a merge message and then merge it. if you want to go back to a previous commit, go to the source control navigator and then right click on the branch commit and then click on checkout . You will go back to the previous version of it. whenever you commit a new version  of your project, your commit window will pop up, where you have to enter a commit message, there you will also find 2 sub windows which show you the difference between the version your  current commit and the version you\'92ve last committed.\
\
Save your projects remotely \
to save your entire project remotely. first click on the Xcode button on the top >> preferences >> accounts >> click on the + button at the bottom which means add new account >> gitHub >> continue >> enter username and token. \
\
\
\
\
\pard\pardeftab720\partightenfactor0

\f2\fs24 \cf9 \kerning1\expnd0\expndtw0 \
\
\
}